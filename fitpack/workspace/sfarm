#!/usr/bin/env python
import time
import os,sys
import argparse
import subprocess


#--from tools
from tools.randomstr import id_generator
from tools.tools import checkdir

#--ATTENTION: user dependent paths
user    ='username'  
fitpack ='path-to-fitpack'    
wdir    ='path-to-working-directory'
python  ='path-to-your-python-binary'


template="""#!/bin/csh
#SBATCH --account=theory
#SBATCH --nodes 1
#SBATCH --partition=theory
#SBATCH --cpus-per-task 3
#SBATCH --mem=2G
#SBATCH --time=0-10:00:00
#SBATCH --constraint=centos7
#SBATCH --job-name="<name>"
#SBATCH --output=<wdir>/<directory>/out/<name>.out
#SBATCH --error=<wdir>/<directory>/out/<name>.err

setenv FITPACK <fitpack>
setenv PYTHONPATH <fitpack>:/work/JAM/apps/lhapdf2/lib/python2.7/site-packages/
<python>  <fitpack>/fitlib/maxlike.py  -n 10 -v <verbose> input.py -msrh "mv <<fname>> <wdir>/<directory>/msr/"   <prior>

"""

template=template.replace('<python>',python)
template=template.replace('<fitpack>',fitpack)
template=template.replace('<wdir>',wdir)


def gen_script(track,directory,prior=None,verbose=100):
    fname='jam-%s'%(id_generator(size=10))
    script=template[:]
    script=script.replace('<name>',fname)
    script=script.replace('<track>',track)
    script=script.replace('<directory>',directory)
    script=script.replace('<verbose>',str(verbose))
    if  prior==None: 
        script=script.replace('<prior>','')
    else: 
        script=script.replace('<prior>','-p %s'%prior)

    F=open('current.sbatch','w')
    F.writelines(script)
    F.close()

def pexit(msg):
    print(msg)
    sys.exit()

if __name__=='__main__':


    ap = argparse.ArgumentParser()
    msg =" 0: gen test sbatch script"
    msg+=" 1: submit jobs(s)"
    ap.add_argument('task'             ,type=int,help=msg)
    ap.add_argument('-d','--directory' ,type=str,default='unamed' 
                                       ,help='directory name to store results')
    ap.add_argument('-p','--priors'    ,type=str,default='unamed' ,help='priors')
    ap.add_argument('-n','--njobs'     ,type=int,default=1 ,help='number of jobs')
    args = ap.parse_args()

    if args.directory=='unamed': pexit('specify -d')

    checkdir('%s/out'%args.directory)
    checkdir('%s/msr'%args.directory)
    os.system('cp input.py %s'%args.directory)
    
    if  args.task==0:

          track='theory'
          path2priors='%s/%s/msr-inspected'%(wdir,args.priors)
          msr=os.listdir(path2priors)

          path2running='%s/%s/out'%(wdir,args.directory)
          running = [_.replace('jam-','').replace('.out','.msr') \
                     for _ in os.listdir(path2running)\
                     if _.endswith('err')==False]

          done = os.listdir('%s/%s/msr'%(wdir,args.directory))
          cnt=0
          for prior in msr[:1]:
              cnt+=1
              #if cnt==2: break
              print('%d/%d'%(cnt,len(msr)))
              gen_script(track,args.directory,'%s/%s'%(path2priors,prior),verbose=1)
              os.system('source current.sbatch')


    elif  args.task==1:

          track='theory'
          path2priors='%s/%s/msr-inspected'%(wdir,args.priors)
          msr=os.listdir(path2priors)

          path2running='%s/%s/out'%(wdir,args.directory)
          running = [_.replace('jam-','').replace('.out','.msr') \
                     for _ in os.listdir(path2running)\
                     if _.endswith('err')==False]

          done = os.listdir('%s/%s/msr'%(wdir,args.directory))
          cnt=0
          for prior in msr:
              cnt+=1
              #if cnt==2: break
              print('%d/%d'%(cnt,len(msr)))
              if prior in done: continue 

              gen_script(track,args.directory,'%s/%s'%(path2priors,prior))
              os.system('sbatch current.sbatch')
              time.sleep(3)




